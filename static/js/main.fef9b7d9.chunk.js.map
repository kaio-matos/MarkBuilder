{"version":3,"sources":["components/StateButton/index.tsx","components/Header/index.tsx","components/Input/index.tsx","components/Output/index.tsx","App.tsx","initialValue.ts","index.tsx"],"names":["StateButton","state","setState","className","onClick","Header","darkState","setDarkState","addTabStringEnter","text","start","end","substring","dealTab","e","key","element","currentTarget","preventDefault","selectionStart","selectionEnd","target","allRawText","value","lineStart","j","getLineStart","selectedLines","tabbedText","lastEnter","i","length","isLastCharacter","selectionTab","Input","setText","spellCheck","onKeyDown","defaultValue","onKeyUp","Output","App","useState","activeDark","setActiveDark","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fef9b7d9.chunk.js","sourcesContent":["import \"./index.css\";\n\ntype StateButtonProps = {\n  state: boolean;\n  setState: (value: boolean) => void;\n};\n\nexport default function StateButton({ state, setState }: StateButtonProps) {\n  return (\n    <div className={state ? \"stateButton_active\" : \"\"}>\n      <button\n        onClick={() => {\n          setState(!state);\n        }}\n        className=\"stateButton\"\n      >\n        <div className=\"circle\"></div>\n        <div className=\"turn Off\"></div>\n        <div className=\"circle\"></div>\n      </button>\n    </div>\n  );\n}\n","import StateButton from \"../StateButton\";\nimport \"./style.css\";\n\ntype HeaderProps = {\n  darkState: boolean;\n  setDarkState: (value: boolean) => void;\n};\n\nexport default function Header({ darkState, setDarkState }: HeaderProps) {\n  return (\n    <header>\n      <div></div>\n      <div>\n        <h1>MarkBuilder</h1>\n      </div>\n      <div>\n        <StateButton state={darkState} setState={setDarkState} />\n      </div>\n    </header>\n  );\n}\n","import \"./style.css\";\n\ntype InputPropsType = {\n  text: string;\n  setText: (value: string) => void;\n};\n\nfunction getLineStart(text: string, selectionStart: number) {\n  let lineStart = selectionStart;\n\n  for (let j = lineStart; j !== -1; j--) {\n    if (text[j] === \"\\n\") {\n      lineStart = j + 1;\n      continue;\n    }\n  }\n\n  return lineStart;\n}\n\nfunction addTabStringEnter(text: string, start: number, end: number) {\n  const line = text.substring(start, end);\n  const tabbedText = \"\\t\" + line + \"\\n\";\n\n  return tabbedText;\n}\n\nfunction selectionTab(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  const target = e.currentTarget;\n  const allRawText = target.value;\n\n  // Selections\n  const selectionStart = target.selectionStart;\n  const selectionEnd = target.selectionEnd;\n\n  let lineStart = getLineStart(allRawText, selectionStart);\n\n  // Get lines from first character of the line to last selected character\n  const selectedLines = allRawText.substring(lineStart, selectionEnd);\n\n  let tabbedText = \"\";\n  let lastEnter = 0;\n\n  // Search for lines ends -> for each line -> tab + line + enter -> add all to tabbedText\n  for (let i = 0; i < selectedLines.length; i++) {\n    const isLastCharacter = i === selectedLines.length - 1;\n    const isEndOfLine = selectedLines[i] === \"\\n\";\n    const isFirstTime = lastEnter === 0;\n\n    if (isEndOfLine) {\n      if (isFirstTime) {\n        tabbedText = addTabStringEnter(selectedLines, lastEnter, i);\n      } else {\n        tabbedText =\n          tabbedText + addTabStringEnter(selectedLines, lastEnter + 1, i);\n      }\n      lastEnter = i;\n    }\n\n    if (isLastCharacter) {\n      const line = selectedLines.substring(lastEnter + 1, i + 1);\n      tabbedText = tabbedText + \"\\t\" + line;\n    }\n  }\n\n  return { tabbedText, lineStart };\n}\n\nfunction dealTab(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  if (e.key === \"Tab\") {\n    const element = e.currentTarget;\n    e.preventDefault();\n    const start = element.selectionStart;\n    const end = element.selectionEnd;\n    const isSelection = start - end !== 0;\n\n    if (isSelection) {\n      const { tabbedText, lineStart } = selectionTab(e);\n\n      element.value =\n        element.value.substring(0, lineStart) +\n        tabbedText +\n        element.value.substring(end);\n    } else {\n      element.value =\n        element.value.substring(0, start) + \"\\t\" + element.value.substring(end);\n    }\n\n    element.selectionStart = element.selectionEnd = start + 1;\n  }\n}\n\nexport default function Input({ text, setText }: InputPropsType) {\n  return (\n    <div className=\"input_container\">\n      <textarea\n        spellCheck=\"false\"\n        onKeyDown={dealTab}\n        defaultValue={text}\n        onKeyUp={(e) => {\n          setText(e.currentTarget.value);\n        }}\n        // onChange=\n      ></textarea>\n    </div>\n  );\n}\n","import Markdown from \"markdown-to-jsx\";\nimport \"./style.css\";\nimport \"./markdown.css\";\n\ntype OutputPropsType = {\n  text: string;\n};\n\nexport default function Output({ text }: OutputPropsType) {\n  return (\n    <div className=\"output_container\">\n      <Markdown>{text}</Markdown>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport initialValue from \"./initialValue\";\nimport Header from \"./components/Header\";\nimport Input from \"./components/Input\";\nimport Output from \"./components/Output\";\nimport \"./App.css\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [activeDark, setActiveDark] = useState(true);\n\n  useEffect(() => {\n    setText(initialValue);\n  }, []);\n\n  return (\n    <div className={`App ${activeDark ? \"dark_mode\" : \"\"}`}>\n      <Header darkState={activeDark} setDarkState={setActiveDark} />\n      <div className=\"container\">\n        <Input text={text} setText={setText} />\n        <Output text={text} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default `\n# Markdown syntax guide\n\n## Headers\n\n# This is a Heading h1\n## This is a Heading h2 \n###### This is a Heading h6\n\n## Emphasis\n\n*This text will be italic*  \n_This will also be italic_\n\n**This text will be bold**  \n__This will also be bold__\n\n_You **can** combine them_\n\n## Lists\n\n### Unordered\n\n* Item 1\n* Item 2\n* Item 2a\n* Item 2b\n\n### Ordered\n\n1. Item 1\n1. Item 2\n1. Item 3\n1. Item 3a\n1. Item 3b\n\n## Images\n\n![This is a alt text.](/image/sample.png \"This is a sample image.\")\n\n## Links\n\nYou may be using [MarkBuilder](https://kaio-matos.github.io/MarkBuilder/).\n\n## Blockquotes\n\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\n>\n>> Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Tables\n\n| Left columns  | Right columns |\n| ------------- |:-------------:|\n| left foo      | right foo     |\n| left bar      | right bar     |\n| left baz      | right baz     |\n\n## Blocks of code\n` +\n  \"```\" +\n  `let message = 'Hello world';\nalert(message);` +\n  \"```\" +\n  `\n\n  ## Inline code\n  ` +\n  \"This web site is using `markdown-to-jsx` and was inspired by [Markdown Live Preview](https://markdownlivepreview.com).\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}