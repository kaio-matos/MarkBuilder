{"version":3,"sources":["components/StateButton/index.tsx","components/Header/index.tsx","components/Input/index.tsx","components/Output/index.tsx","App.tsx","initialValue.ts","index.tsx"],"names":["StateButton","state","setState","className","onClick","Header","darkState","setDarkState","dealTab","e","key","element","currentTarget","preventDefault","start","selectionStart","end","selectionEnd","target","allRawText","value","lineStart","text","j","getLineStart","linesText","substring","lastEnter","lines","i","length","isLastCharacter","push","tabbedText","forEach","console","log","selectionTab","Input","setText","spellCheck","onKeyDown","defaultValue","onKeyUp","Output","App","useState","activeDark","setActiveDark","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5caad09.chunk.js","sourcesContent":["import \"./index.css\";\n\ntype StateButtonProps = {\n  state: boolean;\n  setState: (value: boolean) => void;\n};\n\nexport default function StateButton({ state, setState }: StateButtonProps) {\n  return (\n    <div className={state ? \"stateButton_active\" : \"\"}>\n      <button\n        onClick={() => {\n          setState(!state);\n        }}\n        className=\"stateButton\"\n      >\n        <div className=\"circle\"></div>\n        <div className=\"turn Off\"></div>\n        <div className=\"circle\"></div>\n      </button>\n    </div>\n  );\n}\n","import StateButton from \"../StateButton\";\nimport \"./style.css\";\n\ntype HeaderProps = {\n  darkState: boolean;\n  setDarkState: (value: boolean) => void;\n};\n\nexport default function Header({ darkState, setDarkState }: HeaderProps) {\n  return (\n    <header>\n      <div></div>\n      <div>\n        <h1>MarkBuilder</h1>\n      </div>\n      <div>\n        <StateButton state={darkState} setState={setDarkState} />\n      </div>\n    </header>\n  );\n}\n","import \"./style.css\";\n\ntype InputPropsType = {\n  text: string;\n  setText: (value: string) => void;\n};\n\nfunction getLineStart(text: string, selectionStart: number) {\n  let lineStart = selectionStart;\n\n  for (let j = lineStart; j !== -1; j--) {\n    if (text[j] === \"\\n\") {\n      lineStart = j + 1;\n      break;\n    }\n  }\n\n  return lineStart;\n}\n\n// function addTabStringEnter(text: string, start: number, end: number) {\n//   const line = text.substring(start, end);\n//   const tabbedText = \"\\t\" + line + \"\\n\";\n\n//   return tabbedText;\n// }\n\nfunction selectionTab(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  const target = e.currentTarget;\n  const allRawText = target.value;\n\n  // Selections\n  const selectionStart = target.selectionStart;\n  const selectionEnd = target.selectionEnd;\n\n  let lineStart = getLineStart(allRawText, selectionStart);\n\n  // Get lines from first character of the line to last selected character\n  const linesText = allRawText.substring(lineStart, selectionEnd);\n\n  let lastEnter = 0;\n\n  const lines = [];\n\n  // Create array of lines\n  for (let i = 0; i < linesText.length; i++) {\n    const isLastCharacter = i === linesText.length - 1;\n    const isEndOfLine = linesText[i] === \"\\n\";\n    const isFirstTime = lastEnter === 0;\n\n    if (isEndOfLine || isLastCharacter) {\n      if (isFirstTime) {\n        lines.push(linesText.substring(lastEnter, i + 1));\n        lastEnter = i;\n      } else {\n        lines.push(linesText.substring(lastEnter + 1, i + 1));\n        lastEnter = i;\n      }\n    }\n  }\n\n  let tabbedText = \"\";\n  lines.forEach((text) => {\n    tabbedText = tabbedText + \"\\t\" + text;\n  });\n\n  console.log(lines);\n  return { tabbedText, lineStart };\n}\n\nfunction dealTab(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  if (e.key === \"Tab\") {\n    const element = e.currentTarget;\n    e.preventDefault();\n    const start = element.selectionStart;\n    const end = element.selectionEnd;\n    const isSelection = start - end !== 0;\n\n    if (isSelection) {\n      const { tabbedText, lineStart } = selectionTab(e);\n\n      element.value =\n        element.value.substring(0, lineStart) +\n        tabbedText +\n        element.value.substring(end);\n    } else {\n      element.value =\n        element.value.substring(0, start) + \"\\t\" + element.value.substring(end);\n    }\n\n    element.selectionStart = element.selectionEnd = start + 1;\n  }\n}\n\nexport default function Input({ text, setText }: InputPropsType) {\n  return (\n    <div className=\"input_container\">\n      <textarea\n        spellCheck=\"false\"\n        onKeyDown={dealTab}\n        defaultValue={text}\n        onKeyUp={(e) => {\n          setText(e.currentTarget.value);\n        }}\n        // onChange=\n      ></textarea>\n    </div>\n  );\n}\n","import Markdown from \"markdown-to-jsx\";\nimport \"./style.css\";\nimport \"./markdown.css\";\n\ntype OutputPropsType = {\n  text: string;\n};\n\nexport default function Output({ text }: OutputPropsType) {\n  return (\n    <div className=\"output_container\">\n      <Markdown>{text}</Markdown>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport initialValue from \"./initialValue\";\nimport Header from \"./components/Header\";\nimport Input from \"./components/Input\";\nimport Output from \"./components/Output\";\nimport \"./App.css\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [activeDark, setActiveDark] = useState(true);\n\n  useEffect(() => {\n    setText(initialValue);\n  }, []);\n\n  return (\n    <div className={`App ${activeDark ? \"dark_mode\" : \"\"}`}>\n      <Header darkState={activeDark} setDarkState={setActiveDark} />\n      <div className=\"container\">\n        <Input text={text} setText={setText} />\n        <Output text={text} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default `\n# Markdown syntax guide\n\n## Headers\n\n# This is a Heading h1\n## This is a Heading h2 \n###### This is a Heading h6\n\n## Emphasis\n\n*This text will be italic*  \n_This will also be italic_\n\n**This text will be bold**  \n__This will also be bold__\n\n_You **can** combine them_\n\n## Lists\n\n### Unordered\n\n* Item 1\n* Item 2\n* Item 2a\n* Item 2b\n\n### Ordered\n\n1. Item 1\n1. Item 2\n1. Item 3\n1. Item 3a\n1. Item 3b\n\n## Images\n\n![This is a alt text.](/image/sample.png \"This is a sample image.\")\n\n## Links\n\nYou may be using [MarkBuilder](https://kaio-matos.github.io/MarkBuilder/).\n\n## Blockquotes\n\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\n>\n>> Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Tables\n\n| Left columns  | Right columns |\n| ------------- |:-------------:|\n| left foo      | right foo     |\n| left bar      | right bar     |\n| left baz      | right baz     |\n\n## Blocks of code\n` +\n  \"```\" +\n  `let message = 'Hello world';\nalert(message);` +\n  \"```\" +\n  `\n\n  ## Inline code\n  ` +\n  \"This web site is using `markdown-to-jsx` and was inspired by [Markdown Live Preview](https://markdownlivepreview.com).\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}